Group memebers:
John Freese
jf728
facade.cs.rutgers.edu

Nicholas Konopka
njk42
cpp.cs.rutgers.edu

Hunter Morabito
hjm67
utility.cs.rutgers.edu

Implementation:

---------------------------------

Multi-Level Priority Queue

We have three MLPQ's implemented to hold our Thread Control Blocks.
Each of these Thread Control Blocks have their own priorities (weights)  associated with them.
The run queue holds all threads that have just been created and therefore have the highest priority.
There are three run queues (serparted by time quantums) one a thread exits q1 it cannot return to q1 unless yeild is called.
q3 is the last time quantum the scheduling in all run queues are priority except in q1 where it is RR.
The wait queue holds threads that have explicity yeilded (automatically called when a thread hits a lock).
threads are released from the wait queue when lock release is called or if there are no other threads in the multi level feedback queue.

---------------------------------

Scheduler

The first thing the scheduler checks is whether or not the current thread needs or canceled.
These check is made using one global vaiable. The scheduler then checks the priority queues. 
Threads sitting in the standard run queue are given the least amount of time to run.
After all threads in q1 are complete OR if a thread has been sitting in q3 or q2 for a long time the scheduler runs
a threads from the q2 or q3 priority.

Threads in the run queue will be given 25 microsecond to run. As the threads get further back in the queue, that time increaes to 50 microseconds, and then to a maximum of 125 microseconds.

The scheduler will also run a function called scan(). This is our maintenince cycle. For every 1000000 us or 1 millisecond the priority will be increased by 1 (by increase we mean decrease in weight)
it is a basic implementation since priorities can only have a max of 10 and no lower than 1.
Nonetheless a thread sitting in queue for a long time will have its prioirty increased and eventually get cpu runtime.

